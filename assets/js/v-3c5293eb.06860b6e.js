"use strict";(self.webpackChunkroom_assistant=self.webpackChunkroom_assistant||[]).push([[993],{2203:(e,s,a)=>{a.r(s),a.d(s,{data:()=>n});const n={key:"v-3c5293eb",path:"/guide/api.html",title:"API",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"WebSocket API",slug:"websocket-api",children:[]}],filePathRelative:"guide/api.md",git:{updatedTime:1632434165e3,contributors:[{name:"Heiko Rothe",email:"me@heikorothe.com",commits:1}]}}},2385:(e,s,a)=>{a.r(s),a.d(s,{default:()=>c});var n=a(6252);const t=(0,n.uE)('<h1 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h1><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>The API is still a work in progress and some features are missing. The existing endpoints will stay compatible within the same major version though.</p></div><p>Each instance of room-assistant exposes an HTTP API that you can use for debugging or connecting it to different services. The API is accessible under port <code>6415</code> by default.</p><p>The API is documented with an OpenAPI schema that you can retrieve under <code>/api-json</code>. For a visual representation navigate to <code>/api</code>. You can make all available API calls directly in your browser from this page.</p><h2 id="websocket-api" tabindex="-1"><a class="header-anchor" href="#websocket-api" aria-hidden="true">#</a> WebSocket API</h2><p>room-assistant also offers a websocket interface, which you can use to subscribe to entity updates. It is hosted on the same port as the HTTP API. To subscribe to updates you can send the following request to the socket:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;event&quot;</span><span class="token operator">:</span> <span class="token string">&quot;subscribeEvents&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;entityUpdates&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',7),o=(0,n.Uk)("This will give you a stream of all entity updates in the same format as the "),i=(0,n.Uk)("MQTT integration"),r=(0,n.Uk)(" provides."),p={},c=(0,a(3744).Z)(p,[["render",function(e,s){const a=(0,n.up)("RouterLink");return(0,n.wg)(),(0,n.iD)(n.HY,null,[t,(0,n._)("p",null,[o,(0,n.Wm)(a,{to:"/integrations/mqtt.html#message-format"},{default:(0,n.w5)((()=>[i])),_:1}),r])],64)}]])},3744:(e,s)=>{s.Z=(e,s)=>{for(const[a,n]of s)e[a]=n;return e}}}]);